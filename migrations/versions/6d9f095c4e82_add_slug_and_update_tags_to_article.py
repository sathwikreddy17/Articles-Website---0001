"""Add slug and update tags to Article

Revision ID: 6d9f095c4e82
Revises: 352c01318778
Create Date: 2025-08-09 12:35:22.321123

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '6d9f095c4e82'
down_revision = '352c01318778'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Step 1: Add slug column as nullable
    with op.batch_alter_table('article', schema=None) as batch_op:
        batch_op.add_column(sa.Column('slug', sa.String(length=255), nullable=True))
        batch_op.alter_column('tags',
               existing_type=sa.VARCHAR(length=200),
               type_=sa.String(length=255),
               existing_nullable=True)

    # Step 2: Populate slug for existing articles
    # Use a simple slug: slugify(title) or fallback to 'post-<id>'
    from sqlalchemy.sql import table, column, select
    from sqlalchemy import String, Integer
    import re
    connection = op.get_bind()
    article_table = table('article',
        column('id', Integer),
        column('title', String),
        column('slug', String)
    )
    results = connection.execute(select(article_table.c.id, article_table.c.title)).fetchall()
    def slugify(text):
        text = re.sub(r"[^\w\s-]", "", text).strip().lower()
        text = re.sub(r"[-\s]+", "-", text)
        return text or "post"
    used_slugs = set()
    for row in results:
        base = slugify(row.title)
        slug = base
        n = 2
        while slug in used_slugs:
            slug = f"{base}-{n}"
            n += 1
        used_slugs.add(slug)
        connection.execute(
            article_table.update().where(article_table.c.id == row.id).values(slug=slug)
        )

    # Step 3: Alter slug column to NOT NULL and add unique constraint
    with op.batch_alter_table('article', schema=None) as batch_op:
        batch_op.alter_column('slug', existing_type=sa.String(length=255), nullable=False)
        batch_op.create_unique_constraint('uq_article_slug', ['slug'])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('article', schema=None) as batch_op:
        batch_op.drop_constraint('uq_article_slug', type_='unique')
        batch_op.alter_column('tags',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=200),
               existing_nullable=True)
        batch_op.drop_column('slug')

    # ### end Alembic commands ###


## Removed invalid user promotion and app import code. Migration files should only contain schema changes.
